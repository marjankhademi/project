



<MudPaper Width="350px" MaxHeight="500px" Class=" overflow-y-auto" Elevation="0">
    <MudTreeView Items="@TreeItems">
        <ItemTemplate>
            <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.TreeItems">
                <Content>
                    <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChild" />
				 <MudCheckBox T="bool?" Checked="@(context.HasPartialChildSelection() ? null : context.IsChecked)" CheckedChanged="@((e) => CheckedChanged(context))"></MudCheckBox>
                    <MudText>@context.Text</MudText>
                </Content>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
</MudPaper>
@code {

    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    public class TreeItemData
    {
        public string Text { get; set; }

        public string Icon { get; set; }
          public bool IsChecked { get; set; } = false;
        public bool IsExpanded { get; set; } = true;

        public bool HasChild => TreeItems != null && TreeItems.Count > 0;


        public HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

        public TreeItemData(string text)
        {
            Text = text;

        }
           public bool HasPartialChildSelection()
    {
      int iChildrenCheckedCount = (from c in TreeItems where c.IsChecked select c).Count();
      return HasChild && iChildrenCheckedCount > 0 && iChildrenCheckedCount < TreeItems.Count();
    }

    }
  protected void CheckedChanged(TreeItemData item)
  {
    item.IsChecked = !item.IsChecked;
    // checked status on any child items should mirrror this parent item
    if (item.HasChild)
    {
      foreach (TreeItemData child in item.TreeItems)
      {
        child.IsChecked = item.IsChecked;
      }
    }
    // if there's a parent and all children are checked/unchecked, parent should match
  
	}

    protected override void OnInitialized()
    {
        //TreeItems.Add(new TreeItemData(".azure"));
        //TreeItems.Add(new TreeItemData(".github"));

        TreeItems.Add(new TreeItemData("طبقه بندی")
        {
            TreeItems = new HashSet<TreeItemData>()
            {
                new TreeItemData("صنایع "),
                 new TreeItemData("الکترونیک مخابرات "),
                new TreeItemData("سایر درآمدها")
                {
                    TreeItems = new HashSet<TreeItemData>()
                    {
                        new TreeItemData("سایر درآمدهای عملیاتی")
                        {
                            TreeItems = new HashSet<TreeItemData>()
                            {
                                 new TreeItemData("درآمد حاصل از فروش متفرقه"),
                                  new TreeItemData("درآمد حاصل از فروش  غیر متفرقه"),
                            }
                        },
                        new TreeItemData( "سایر درامد های غیر عملیاتی"),
                        
                    }
                },
                //new TreeItemData("MudBlazor.Docs.Client"),
              
            
            }
        });
        //TreeItems.Add(new TreeItemData("History"));
    }
    }
    
